#!/bin/bash
# appctl is an utility script for managing your Misago deployment.
# To find out what options are available, run it without any arguments.

# Text styles
RED='\033[0;31m'
BOLD=$(tput bold)
NORMAL=$(tput sgr0)

# Define env paths
# Those are paths to env files created by wizard
misago_env_path="./config/misago.env"
env_paths=(
    $misago_env_path
    "./config/postgres.env"
)

# Find docker compose path
docker_compose=$(which docker-compose)

# Utility functions used by action commands
error() {
    echo -e "${RED}Error:${NORMAL} $1"
}

require_setup() {
    for env_path in "${env_paths[@]}"; do
        if [ ! -e $env_path ]; then
            error "You need to setup your site using \"./appctl setup\" before you will be able to use this option."
            echo
            exit 1
        fi
    done
}

# Check if user has docker and docker-compose
if ! command -v docker >/dev/null 2>&1; then
    error "You need to have Docker installed to use this tool."
    echo
    echo "Docker release for your system can be downloaded for free from this page:"
    echo "https://www.docker.com/get-started"
    echo
    echo "If you are on Linux, you will also have to install Docker Compose after installing Docker:"
    echo "https://docs.docker.com/compose/install/"
    echo
    exit 1
elif ! command -v $docker_compose >/dev/null 2>&1; then
    error "You need to have Docker Compose installed to use this tool."
    echo
    echo "Guide for installing Docker Compose on your system can be found on this page:"
    echo "https://docs.docker.com/compose/install/"
    echo
    exit 1
fi

# Commands
intro() {
    echo "Usage: ./appctl [arg] ..."
    echo "Arguments grouped by type:"
    echo
    echo "Setup and upgrade:"
    echo
    echo "    ${BOLD}setup${NORMAL}             setup new Misago site."
    echo
}

# Handle invalid argument
invalid_argument() {
    echo -e "Invalid argument: ${RED}$1${NORMAL}"
    echo "Please run this script without any arguments to see the list of available arguments."
    echo
    exit 1
}

# Run new site setup
setup() {
    # Run docker build
    docker-compose build --no-cache --force-rm --pull
    docker-compose run --rm misago ./bootstrap migrate
    docker-compose run --rm --no-deps misago cp -r /app/admin/build/admin /app/static/
    docker-compose run --rm --no-deps misago cp -r /app/client/build/misago /app/static/
    docker-compose up --detach
    echo "Setup completed."
    if [ "$initialize_default_database" != "n" ]; then
        echo "If you have already pointed a domain at this server, you can now visit it to access your Misago site."
        echo "Please note that it may take up to few minutes for HTTPS to activate."
    else
        echo "Database was not initialized. Restore from backup or load custom db dump to psql and use \"./appctl start\" to start Misago server."
    fi
}

# Run upgrade process
upgrade() {
    git_commit=$(git rev-parse HEAD)
    git_commit=${git_commit:0:8}

    echo "You are going to upgrade your Misago site to the new version."
    echo "All running docker containers will be stopped for the duration of the upgrade."
    echo "Your site's data will be backed up to the \"backups\" directory."
    echo "New version of misago-docker will be pulled from github.com"
    echo
    echo "In case of any issues, run this command to return to the current version:"
    echo
    echo "git reset --hard $git_commit && docker-compose build --no-cache --force-rm --pull"
    echo
    echo "Note: remember to also restore your backup in case you are rolling back!"
    echo

    read -p "Start upgrade process? [Y/n]: " start_upgrade
    if [ "$start_upgrade" = "n" ]; then
        echo "Upgrade canceled."
        exit
    fi

    echo "Stopping containers for upgrade..."
    docker-compose stop
    git pull
    
    docker-compose build --no-cache --force-rm --pull
    collectstatic
    docker-compose run --rm misago python manage.py migrate
    docker-compose run --rm misago python manage.py invalidateversionedcaches
    echo "Upgrade has been completed, restarting containers..."
    start_containers
    set_crontab
}

# Start docker containers
start_containers() {
    docker-compose up --detach
}

# Stop docker containers
stop_containers() {
    docker-compose stop
}

# Restart docker containers
restart_containers() {
    docker-compose stop
    docker-compose up --detach
}

# Command dispatcher
if [[ $1 ]]; then
    if [[ $1 = "setup" ]]; then
        setup
    elif [[ $1 = "upgrade" ]]; then
        upgrade
    elif [[ $1 = "up" ]]; then
        start_containers
    elif [[ $1 = "start" ]]; then
        start_containers
    elif [[ $1 = "stop" ]]; then
        stop_containers
    elif [[ $1 = "restart" ]]; then
        restart_containers
    elif [[ $1 = "gitreset" ]]; then
        docker-compose stop
        docker system prune --all --volumes -f
        git pull
        git submodule update
        setup
    elif [[ $1 = "gitsync" ]]; then
        docker-compose stop
        git pull
        git submodule update
        docker-compose build misago
        docker-compose run --rm --no-deps misago cp -r /app/admin/build/admin /app/static/
        docker-compose run --rm --no-deps misago cp -r /app/client/build/misago /app/static/
        docker-compose up --detach
        echo
        echo "Done! If there are no build errors and site has been restarted"
        echo "successfully, remember to prune dangling docker images that are"
        echo "no longer required but take disk space:"
        echo
        echo "docker system prune -a"
        echo
    else
        invalid_argument $1
    fi
else
    intro
fi